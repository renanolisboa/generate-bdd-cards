#!/usr/bin/env tsx

import { config } from 'dotenv';
import axios from 'axios';
import { Logger } from './utils/logger.js';

// Load environment variables
config();

const logger = Logger.getInstance();
logger.setVerbose(true);

async function debugGepetoBDD() {
  logger.info('üîç Debugging Gepeto BDD Generation...');
  
  const gepetoConfig = {
    baseUrl: process.env.GEPETO_API_BASE || 'https://gepeto.svc.in.devneon.com.br/api/',
    apiKey: process.env.GEPETO_API_KEY || '',
    model: process.env.GEPETO_MODEL || 'gpt-5',
    endpoint: 'chat/completions',
  };
  
  const sampleDocument = `
# Sistema de Pagamentos - Central de Pagamentos

## Vis√£o Geral
O sistema de Central de Pagamentos √© respons√°vel por processar, validar e gerenciar todas as transa√ß√µes financeiras da plataforma Neon.

## Funcionalidades Principais

### 1. Processamento de Pagamentos
Como usu√°rio do sistema, eu quero processar pagamentos de forma segura e eficiente para que as transa√ß√µes sejam conclu√≠das rapidamente.

**Requisitos:**
- Suporte a m√∫ltiplos m√©todos de pagamento (PIX, cart√£o de cr√©dito, d√©bito)
- Valida√ß√£o de dados em tempo real
- Processamento ass√≠ncrono para grandes volumes
- Retry autom√°tico em caso de falhas tempor√°rias

### 2. Gest√£o de Contas
Como usu√°rio, eu quero gerenciar minha conta de pagamento para ter controle total sobre minhas transa√ß√µes.

**Funcionalidades:**
- Visualiza√ß√£o de saldo em tempo real
- Hist√≥rico de transa√ß√µes
- Configura√ß√£o de limites
- Notifica√ß√µes de transa√ß√µes

### 3. Seguran√ßa e Compliance
Como administrador, eu quero garantir que o sistema atenda aos padr√µes de seguran√ßa para proteger os dados dos usu√°rios.

**Requisitos de Seguran√ßa:**
- Criptografia end-to-end
- Autentica√ß√£o de dois fatores
- Auditoria de transa√ß√µes
- Conformidade com LGPD

## Arquitetura T√©cnica

### Componentes Principais
| Componente | Responsabilidade | Tecnologia |
|------------|------------------|------------|
| API Gateway | Roteamento e autentica√ß√£o | Node.js |
| Payment Processor | Processamento de pagamentos | Python |
| Database | Persist√™ncia de dados | PostgreSQL |
| Cache | Performance | Redis |

### Fluxo de Pagamento
\`\`\`
1. Usu√°rio inicia pagamento
2. Sistema valida dados
3. Processa pagamento
4. Atualiza saldo
5. Envia notifica√ß√£o
\`\`\`

## Crit√©rios de Aceita√ß√£o

### Pagamento PIX
- [ ] Valida√ß√£o de chave PIX
- [ ] Processamento em tempo real
- [ ] Confirma√ß√£o de recebimento
- [ ] Notifica√ß√£o ao usu√°rio

### Pagamento Cart√£o
- [ ] Valida√ß√£o de dados do cart√£o
- [ ] Processamento via gateway
- [ ] Confirma√ß√£o de transa√ß√£o
- [ ] Atualiza√ß√£o de saldo
`;

  const systemPrompt = `Voc√™ √© um analista de produto especializado em criar hist√≥rias de usu√°rio concisas e acion√°veis no formato BDD (Behavior-Driven Development) a partir de documenta√ß√£o de produto em Markdown.

Sua tarefa √© analisar o documento Markdown fornecido e gerar cards pequenos e autocontidos prontos para o Jira no formato BDD.

Diretrizes para processamento de Markdown:
1. Identifique se√ß√µes principais usando cabe√ßalhos (# ## ###)
2. Extraia listas de requisitos (- * 1. 2.)
3. Reconhe√ßa blocos de c√≥digo e tabelas
4. Preserve links e formata√ß√£o importante
5. Divida t√≥picos grandes em m√∫ltiplos cards pequenos e at√¥micos
6. Cada card deve ser implement√°vel independentemente
7. Foque no valor do usu√°rio e crit√©rios de aceita√ß√£o claros
8. Use formato Dado/Quando/Ent√£o para crit√©rios de aceita√ß√£o
9. Mantenha resumos com menos de 80 caracteres
10. Priorize cards baseado no impacto do usu√°rio e depend√™ncias
11. SEMPRE gere todo o conte√∫do em PORTUGU√äS BRASILEIRO

Estrutura de an√°lise do Markdown:
- Cabe√ßalhos (# ## ###) = Se√ß√µes principais do produto
- Listas (- * 1. 2.) = Requisitos e funcionalidades
- Blocos de c√≥digo (\`\`\`) = Especifica√ß√µes t√©cnicas
- Tabelas (|) = Dados estruturados
- Links [texto](url) = Refer√™ncias importantes
- **Negrito** = Pontos importantes
- *It√°lico* = √änfase

Formato de sa√≠da: Retorne APENAS um array JSON v√°lido de objetos com estes campos exatos:
- summary (string, max 80 chars): T√≠tulo breve da hist√≥ria
- description (string): Descri√ß√£o detalhada em formato markdown
- acceptanceCriteria (array of strings): Declara√ß√µes Dado/Quando/Ent√£o
- labels (array of strings, opcional): Tags relevantes
- priority (enum, opcional): "Muito Baixa", "Baixa", "M√©dia", "Alta", "Muito Alta"
- storyPoints (number, opcional): Estimativa de esfor√ßo (1-13)
- component (string, opcional): Componente do sistema
- epicLink (string, opcional): √âpico relacionado
- linkedIssues (array of strings, opcional): Chaves de issues relacionadas

Exemplo:
[
  {
    "summary": "Usu√°rio pode fazer login com email e senha",
    "description": "Como usu√°rio, eu quero fazer login no sistema para que eu possa acessar minha conta.\n\n**Contexto:** Sistema de autentica√ß√£o seguro\n**Valor:** Acesso controlado √† plataforma",
    "acceptanceCriteria": [
      "Dado que estou na p√°gina de login",
      "Quando eu inserir email e senha v√°lidos",
      "Ent√£o devo ser redirecionado para o dashboard"
    ],
    "labels": ["autentica√ß√£o", "gerenciamento-de-usu√°rio"],
    "priority": "Alta",
    "storyPoints": 3
  }
]

IMPORTANTE: Retorne APENAS o array JSON, sem texto adicional ou formata√ß√£o.`;

  const userPrompt = `Por favor, analise o seguinte documento Markdown e gere hist√≥rias de usu√°rio no formato BDD para o Jira:

${sampleDocument}

Instru√ß√µes espec√≠ficas para an√°lise de Markdown:
1. Identifique as se√ß√µes principais usando os cabe√ßalhos (# ## ###)
2. Extraia requisitos das listas (- * 1. 2.)
3. Considere blocos de c√≥digo como especifica√ß√µes t√©cnicas
4. Use tabelas para entender dados estruturados
5. Preserve links importantes como refer√™ncias
6. Destaque informa√ß√µes em **negrito** e *it√°lico*

Gere 5-15 cards que cubram as principais funcionalidades e requisitos. Foque em:
- Funcionalidades voltadas para o usu√°rio
- Crit√©rios de aceita√ß√£o claros baseados nos requisitos
- Hist√≥rias at√¥micas e implement√°veis
- Prioriza√ß√£o adequada baseada na estrutura do documento
- Componentes identificados nas se√ß√µes t√©cnicas
- SEMPRE em PORTUGU√äS BRASILEIRO

Retorne o resultado como um array JSON seguindo exatamente o schema fornecido no prompt do sistema.`;

  logger.info(`System prompt length: ${systemPrompt.length} characters`);
  logger.info(`User prompt length: ${userPrompt.length} characters`);
  logger.info(`Total prompt length: ${systemPrompt.length + userPrompt.length} characters`);
  
  try {
    // Test with the exact same approach as the GepetoClient
    logger.info('Testing with same approach as GepetoClient...');
    const client = axios.create({
      baseURL: gepetoConfig.baseUrl,
      headers: {
        'Authorization': `Bearer ${gepetoConfig.apiKey}`,
        'Content-Type': 'application/json',
      },
    });
    
    const response = await client.post(gepetoConfig.endpoint, {
      model: gepetoConfig.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: userPrompt,
        },
      ],
      max_completion_tokens: 8000,
    });
    
    logger.success('‚úÖ BDD generation successful!');
    logger.info('Response:');
    console.log(JSON.stringify(response.data, null, 2));
    
    // Try to parse the response
    const content = response.data.choices[0]?.message?.content;
    if (content) {
      logger.info('\nüìã Generated Content:');
      console.log(content);
      
      // Try to extract JSON
      const jsonMatch = content.match(/```json\n([\s\S]*?)\n```/) || content.match(/```\n([\s\S]*?)\n```/);
      const jsonString = jsonMatch ? jsonMatch[1] : content;
      
      try {
        const parsed = JSON.parse(jsonString);
        logger.success(`‚úÖ Successfully parsed ${parsed.length} BDD cards`);
        parsed.forEach((card: any, index: number) => {
          logger.info(`${index + 1}. ${card.summary}`);
        });
      } catch (parseError) {
        logger.warning('‚ö†Ô∏è  Failed to parse JSON from response');
        logger.debug(`JSON string: ${jsonString}`);
      }
    }
    
  } catch (error: any) {
    logger.error(`‚ùå BDD generation failed: ${error.message}`);
    if (error.response) {
      logger.error(`Status: ${error.response.status}`);
      logger.error(`Response: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }
}

async function main() {
  await debugGepetoBDD();
}

main().catch(console.error);
