#!/usr/bin/env tsx

import { GepetoClient } from './modules/gepeto.js';
import { BDDCard } from './types/index.js';
import { Logger } from './utils/logger.js';

const logger = Logger.getInstance();
logger.setVerbose(true);

// Mock configuration for testing
const mockGepetoConfig = {
  baseUrl: 'https://mock-gepeto.example.com',
  apiKey: 'mock-api-key',
  model: 'gpt-5',
  endpoint: '/chat/completions',
};

// Sample document content for testing
const sampleDocument = `
# Product Requirements Document

## User Authentication

As a user, I want to be able to login to the system so that I can access my personal dashboard.

### Requirements
- Users should be able to login with email and password
- Users should be able to reset their password
- Users should be able to logout
- Session should timeout after 30 minutes of inactivity

## Dashboard Features

As a logged-in user, I want to see a personalized dashboard with my recent activity and key metrics.

### Requirements
- Display recent notifications
- Show key performance indicators
- Allow quick access to frequently used features
- Responsive design for mobile devices

## Data Export

As a user, I want to export my data in various formats so that I can use it in other tools.

### Requirements
- Export data as CSV, JSON, and PDF
- Support filtering and date range selection
- Email export results to user
- Large exports should be processed asynchronously
`;

// Mock Gepeto client for testing
class MockGepetoClient extends GepetoClient {
  async generateBDDCards(documentContent: string) {
    logger.info('üß™ MOCK MODE: Generating BDD cards...');
    
    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Generate mock BDD cards based on the document content
    const mockCards: BDDCard[] = [
      {
        summary: 'Usu√°rio pode fazer login com email e senha',
        description: 'Como usu√°rio, eu quero fazer login no sistema para que eu possa acessar meu dashboard pessoal.',
        acceptanceCriteria: [
          'Dado que estou na p√°gina de login',
          'Quando eu inserir email e senha v√°lidos',
          'Ent√£o devo ser redirecionado para o dashboard',
          'E devo ver meu conte√∫do personalizado'
        ],
        labels: ['autentica√ß√£o', 'gerenciamento-de-usu√°rio'],
        priority: 'Alta',
        storyPoints: 3
      },
      {
        summary: 'Usu√°rio pode redefinir senha esquecida',
        description: 'Como usu√°rio, eu quero redefinir minha senha quando eu esquecer para que eu possa recuperar o acesso √† minha conta.',
        acceptanceCriteria: [
          'Dado que estou na p√°gina de login',
          'Quando eu clicar em "Esqueci minha senha"',
          'E eu inserir meu endere√ßo de email',
          'Ent√£o devo receber um email de redefini√ß√£o de senha',
          'E devo conseguir definir uma nova senha'
        ],
        labels: ['autentica√ß√£o', 'seguran√ßa'],
        priority: 'M√©dia',
        storyPoints: 2
      },
      {
        summary: 'Sess√£o do usu√°rio expira ap√≥s inatividade',
        description: 'Como sistema, eu quero fazer logout autom√°tico de usu√°rios inativos para manter a seguran√ßa.',
        acceptanceCriteria: [
          'Dado que um usu√°rio est√° logado',
          'Quando o usu√°rio ficar inativo por 30 minutos',
          'Ent√£o o usu√°rio deve ser automaticamente deslogado',
          'E o usu√°rio deve ser redirecionado para a p√°gina de login'
        ],
        labels: ['autentica√ß√£o', 'seguran√ßa'],
        priority: 'M√©dia',
        storyPoints: 1
      },
      {
        summary: 'Usu√°rio pode visualizar dashboard personalizado',
        description: 'Como usu√°rio logado, eu quero ver um dashboard personalizado com minha atividade recente e m√©tricas principais.',
        acceptanceCriteria: [
          'Dado que estou logado',
          'Quando eu navegar para o dashboard',
          'Ent√£o devo ver minhas notifica√ß√µes recentes',
          'E devo ver indicadores-chave de performance',
          'E devo ter acesso r√°pido a funcionalidades frequentemente usadas'
        ],
        labels: ['dashboard', 'interface-do-usu√°rio'],
        priority: 'Alta',
        storyPoints: 5
      },
      {
        summary: 'Dashboard √© responsivo em dispositivos m√≥veis',
        description: 'Como usu√°rio m√≥vel, eu quero que o dashboard funcione bem no meu dispositivo m√≥vel.',
        acceptanceCriteria: [
          'Dado que estou usando um dispositivo m√≥vel',
          'Quando eu acessar o dashboard',
          'Ent√£o o layout deve se adaptar ao tamanho da minha tela',
          'E todas as funcionalidades devem ser acess√≠veis via toque'
        ],
        labels: ['dashboard', 'm√≥vel', 'responsivo'],
        priority: 'M√©dia',
        storyPoints: 3
      },
      {
        summary: 'Usu√°rio pode exportar dados como CSV',
        description: 'Como usu√°rio, eu quero exportar meus dados como CSV para que eu possa us√°-los em aplica√ß√µes de planilha.',
        acceptanceCriteria: [
          'Dado que estou na p√°gina de exporta√ß√£o de dados',
          'Quando eu selecionar formato CSV',
          'E eu escolher meus filtros de dados',
          'Ent√£o devo conseguir baixar um arquivo CSV',
          'E o arquivo deve conter os dados filtrados'
        ],
        labels: ['exporta√ß√£o-de-dados', 'csv'],
        priority: 'M√©dia',
        storyPoints: 2
      },
      {
        summary: 'Usu√°rio pode exportar dados como JSON',
        description: 'Como desenvolvedor, eu quero exportar meus dados como JSON para que eu possa us√°-los em minhas aplica√ß√µes.',
        acceptanceCriteria: [
          'Dado que estou na p√°gina de exporta√ß√£o de dados',
          'Quando eu selecionar formato JSON',
          'E eu escolher meus filtros de dados',
          'Ent√£o devo conseguir baixar um arquivo JSON',
          'E o arquivo deve conter os dados filtrados em formato JSON'
        ],
        labels: ['exporta√ß√£o-de-dados', 'json', 'api'],
        priority: 'Baixa',
        storyPoints: 2
      },
      {
        summary: 'Exporta√ß√µes grandes de dados s√£o processadas assincronamente',
        description: 'Como usu√°rio, eu quero que exporta√ß√µes grandes de dados sejam processadas em segundo plano para que eu n√£o precise esperar.',
        acceptanceCriteria: [
          'Dado que eu solicito uma exporta√ß√£o grande de dados',
          'Quando a exporta√ß√£o demorar mais de 30 segundos',
          'Ent√£o devo receber um email quando a exporta√ß√£o estiver pronta',
          'E devo conseguir baixar o arquivo do email'
        ],
        labels: ['exporta√ß√£o-de-dados', 'performance', 'ass√≠ncrono'],
        priority: 'Baixa',
        storyPoints: 4
      }
    ];

    logger.success(`Generated ${mockCards.length} BDD cards`);
    
    // Display preview
    console.log('\nüìã Generated BDD Cards Preview:');
    console.log('=' .repeat(80));
    
    mockCards.forEach((card, index) => {
      console.log(`\n${index + 1}. ${card.summary}`);
      console.log(`   Priority: ${card.priority || 'Not set'}`);
      console.log(`   Story Points: ${card.storyPoints || 'Not set'}`);
      console.log(`   Labels: ${card.labels?.join(', ') || 'None'}`);
      
      if (card.acceptanceCriteria && card.acceptanceCriteria.length > 0) {
        console.log('   Acceptance Criteria:');
        card.acceptanceCriteria.slice(0, 2).forEach(criteria => {
          console.log(`     ‚Ä¢ ${criteria}`);
        });
        if (card.acceptanceCriteria.length > 2) {
          console.log(`     ‚Ä¢ ... and ${card.acceptanceCriteria.length - 2} more`);
        }
      }
    });
    
    console.log('\n' + '=' .repeat(80));

    return {
      success: true,
      data: mockCards,
    };
  }
}

// Test function
async function runTest() {
  logger.info('üß™ Running mock test...');
  
  try {
    const mockClient = new MockGepetoClient(mockGepetoConfig);
    const result = await mockClient.generateBDDCards(sampleDocument);
    
    if (result.success && result.data) {
      logger.success(`‚úÖ Test completed successfully! Generated ${result.data.length} cards.`);
      
      // Save test results
      const { writeFileSync, mkdirSync } = await import('fs');
      const { join } = await import('path');
      
      const cacheDir = '.cache';
      try {
        mkdirSync(cacheDir, { recursive: true });
      } catch (error) {
        // Directory might already exist
      }
      
      const testResultsPath = join(cacheDir, 'test_results.json');
      writeFileSync(testResultsPath, JSON.stringify(result.data, null, 2));
      logger.info(`Test results saved to: ${testResultsPath}`);
    } else {
      logger.error(`‚ùå Test failed: ${(result as any).error || 'Unknown error'}`);
    }
  } catch (error) {
    logger.error(`‚ùå Test error: ${error}`);
  }
}

// Run the test
runTest().catch(console.error);
